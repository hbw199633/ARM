进程间通信之IPC 对象：

IPC： 进程间通信

IPC对象： 内核维护的一组共享数据对象；
		  消息队列对象  共享内存对象  信号量集对象

IPC 通用操作框架：
 创建key值 ==》申请IPC对象 ==》打开对象==》读写对象==》
    关闭对象 ==》卸载对象



1、唯一key值的创建：
	1.1 私有键值  ==》IPC_PRIVATE  只给亲缘关系进程使用；
	1.2 临时键值  ==》ftok() 临时创建键值
	1.3 自定义键值 ==》 0x12345678   0x888  0x666


#include <sys/types.h>
#include <sys/ipc.h>

key_t ftok(const char *pathname, int proj_id);
功能：该函数可以根据指定的路径和id唯一生成一个key值；
参数： pathname  指定一个不能被删除重建的路径
	   id   指定一个128 以内的任意数字；
返回值：成功 唯一key值
		失败 -1；


2、消息队列操作框架：
	申请/打开消息队列对象 ===》读写对象 ===》卸载对象
	   msgget()              msgsnd()        msgctl()
	   						 msgrcv()



#include <sys/msg.h>

int msgget(key_t key, int msgflg);
功能：该函数可以根据key值向操作系统内核提出消息队列使用申请；
参数：key  唯一键值
	  msgflg 申请消息队列的方式以及权限
	  		 如果是第一次申请用IPC_CREAT 来创建对象
			 如果不是第一次申请用IPC_EXCL 来检测判断
			 权限使用八进制的默认权限
返回值：成功 msgid 的消息队列对象id
		失败 -1

注意要验证申请的对象是否创建成功可以通过一下shell命令查看；

ipcs -a  ===> 可以查看所有IPC对象信息
ipcs -q  ====》只查看消息队列对象信息

删除：
ipcrm -q  msgid
eg: ipcrm  -q 	0 

练习：
	使用私有键值和自定义键值，配合msgget函数尝试申请消息队列
	并通过ipcs 命令验证；
	
读写消息队列：===》进程间通信

写操作：msgsnd()
int msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg);
功能：该函数可以将指定的格式的数据写入目标消息队列对象中。
参数：msqid 要存储消息的消息队列id
      msgp  要存储消息的消息格式，一般如下格式：
	  struct msgbuf {
		  long mtype;       /* message type, must be > 0 */
		  char mtext[128];    /* message data */
	  };
	 msgsz  要存储消息的大小，一般是参数2的大小
	 msgflg 存储消息的方式，0 表示阻塞存储，IPC_NOWAIT 表示非阻塞；
返回值：成功 0
		失败 -1；


读操作： msgrcv()
 ssize_t msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp,
                       int msgflg);
 功能：该函数可以从指定的消息队列对象中获取数据到本地内存。
 参数： msqid 消息队列id
 		msgp  获取消息后存储到本地的本地内存，一般和发送数据结构一样；
		msgsz 预计获取数据的长度
		msgtyp 要获取数据的类型
		msgflg 获取数据的方式，0 表示阻塞获取；
 返回值：成功 返回实际获取的数据长度
 		 失败 -1；


练习：
   根据以上知识点，使用两个独立进程并在消息队列中完成如下功能：
	进程1  获取输入并写入消息队列
	进程2  读取消息队列并打印输出
	当输入"quit"的时候双方退出；


删除消息队列对象： msgctl
int msgctl(int msqid, int cmd, struct msqid_ds *buf);
功能：该函数可以修改指定消息队列的属性，也可以删除消息队列；
	  属性一般不做调整，多用于删除操作。
参数：msqid 要删除的目标消息队列id
	  cmd   IPC_RMID 表示删除消息队列
	  buf   NULL  表示属性不做调整；
返回值：成功 0
		失败 -1；



思考题：

1、如何向消息队列中存储不同类型数据并可以根据消息类型指定获取消息？


2、相同类型的数据在消息队列中是哪种形式存储，多个不同类型的数据
   在消息队列中如何存储？

3、如何依次获取消息队列中所有数据？


4、消息队列做多能创建多少个？每个最多能存储多少数据 ？






只是文件符号，不同于普通文件；

