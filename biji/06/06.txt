C语言的运算符
	赋值运算符: = += -= *= /=， |= &=
	关系运算符: == != >= <= > <
	算术运算符: + - * / ++ -- %
	逻辑运算符: && || !(非，逻辑取反)
	位运算符  : & |  ^ ~ << >>
	特殊运算符: 条件运算符 逗号运算符， szieof
=================================================
赋值运算符：
	=从符号的右边向左边进行赋值，=左边一定是变量，不能是常量
	= += -= *= /= |= &=
======================================================
关系运算
	==双目运算符，符号左右两边必须是表达式，运算的结果是为了检测左右两边是否相当相等
	注意：和=赋值运算符区别*****
	!=双目运算符，运算的结果和==相反，用与测试运算符两边的表达式是否不同。
	< > <= >= 
=====================================================
算术运算符
+ - * / ++ -- %
/  ==>默认会执行取整运算，分母不能为0
%  ==>必须为整数
++ ==>自加运算,单目运算符,表示给当前的变量自动加1
	a++ 先用a的值在进行++运算
	++a 先进行++运算再用a的值
-- ==>自减运算,单目运算符,表示给当前的变量自动减1
	a-- 先用a的值在进行--运算
	--a 先进行--运算再用a的值
注意：多个自加自减运算同时运行，可能出现优先级和函数入栈顺序不同，再不通的编译器有不同的答案
练习：while循环打印'A'~'Z','Z'~'A',用++ --完成
====================================================
逻辑运算符：&& || !(非，逻辑取翻)
	1、逻辑与 && 逻辑与类似与乘法
	属于双目运算符，表示等号两边的表达式进行逻辑与运算
	左运算变量	右运算变量  结果
		非0			非0		 1
		非0			  0		 0 
		  0			非0		 0 
		  0			  0		 0 
	短路原则：一假全假（0为假）
练习：int a =5,b=10;
		(a>5)&&(b<20) 假
		(a=5)&&(b<10) 假
		(a>4)&&(b<=10)真
		(a>5)&&(b<10) 假
	printf("a+b=%d\n",a+b);	

逻辑或运算符：||  ==>类似与算符运算法的加法	
	双目运算法
	左运算变量	右运算变量	结果
		非0			非0		 1
		非0			 0		 1
	     0			非0		 1
		 0			 0		 0
	 短路原则：一真全真
 练习：int a =5,b=10;
		(a>5)||(b<20)	真
		(a=5)||(b<10)	真
		(a>4)||(b<=10)	真
		(a>5)||(b<10)	假
	printf("a+b=%d\n",a+b);	
逻辑取翻
单目运算符： ! ===>取反运算
eg: int a = 1;
	!a = 0;
	int a = -1;
	!a = 0；
	int a = 1;
	!!a = 1;
	int a = -1;
	!!a = 1;
位运算符：
	& | ~ ^ >> <<
1、位运算符 & ==>双目运算符，主要用于两个整数按bit位进行每位之间的逻辑与运算
	注意：&左右两边在运算过程中需要转换成二进制
		相当那于每一位进行逻辑与运算
		左运算量	右运算量	结果
			1			1		 1	
			1			0		 0	
			0			1		 0
			0			0		 0
	与0为0
	练习：
		unsigned int x = 0x4ac; y = 0127; 
		unsigned int z = x&y;
		printf("%d",z); ==>4
注意：二进制数字位数从0位开始，到31位结尾
实际应用：置0操作
	unsigned int x = 0x4ac;将第3位置零
	x=0x4a4;
2、位或运算 | ==>双目运算符
	在|左右两边的两个表达式按bit位进行运算
		左运算符	右运算符	结果
			1			1		 1
			1			0		 1	
			0			1		 1	
			0			0		 0
	或1为1
	练习：
	unsigned int a = 0x100,b=0123;
	unsigned int z = 0;
	z = a | b;
	printf("%d",z);
3、	~按位取反  单目运算符
	表示将符号对应的整数为进行按位取反操作
	~ 运算量	结论
		0	      1
		1		  0
	练习：
	unsigned int a = 20, b = 0;
	b = ~a;
	printf("%u",b); 4294967275

	unsigned char x = 0xac , y = 012 z = 11;
	unsigned char w = (~x)|(~y)&(~z);
	printf("%d",w);
	
	unsigned char x = 0xbf , y = 056 z = 30;
	unsigned char w = (~x)|(~y)&(~z);
	printf("%d",w);
4、^异或运算符： ==>双目运算符
	表示将运算符两边的整数转化为二进制，如果bit位不同则逻辑值为真，如果相同则为假
		左运算符	右运算符	结果
			1			1		  0
			1			0		  1
			0			1		  1
			0			0		  0
	练习：int a =0x12,b = 034;
		  int c = a^b; c ? 016 0xe

		  char a = 'a' ,b = '0',c = 0;
	      c = a ^ b; ==> c ==81;
5、位移运算符  <<  >> ==>双目运算符
	表示将某个整数中的整体移动多少个位置
	格式：<运算量> <位移运算符> 整数
	eg: char a = 10;
		a = a<<3; a ==80 
		char a ='z';
		a = a>>1; a ==61
		左移运算符：整体向左边移动位数并从右边补充移动位数的0；相当于将当前的数字*2^移动位数
		右移运算符：整体向右边移动位数并从左边补充移动位数的0；相当与将当前的数字/2^移动位数
	unsigned char a = 1 , b = 0xac,c = 0;
	a = a << 3; a ==8
	b = a ^ b; b==164
	c = (a << 3) & (b >> 2); c==0
特殊运算符：
1、条件运算符：
	格式：<逻辑表达式>?<表达式1>:<表达式2>
		执行过程：首先判断逻辑表达式的值：如果为真,则执行表达式1，否则则执行表达式2；
	a = 5; b =6
	a>b a+b a-b
	a<b	a+b a-b
2、逗号运算符：
	格式：<表达式1>=(表达式2,表达式3，表达式4，...);
	eg: int x =1 ,y = 2, z =3;
		printf("%d\n",(x,y,z));
	执行过程：从逗号表达式的(开始)到结束，依次从左向右执行，并将做后一个表达式的值赋给表达式1，

3、sizeof运算符 ==>用来测试某个类型或者变量的动态内存占空间的大小
	格式： sizeof(类型/变量名)
	eg:	int a = 10;
		szieof(a);
		szieof(int);

