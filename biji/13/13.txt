C语言的构造数据类型  ==》结构体

结构体的定义
结构体变量的初始化
结构体变量的引用

结构体变量指针
结构体变量数组
结构体变量传参

1、结构体变量的定义
	格式：<存储类型> struct 结构体名称
			{
				数据类型	成员变量1；
				数据类型	成员变量2；
				数据类型	成员变量3；
				...
				数据类型	成员变量n；
			}
	eg:struct student
	   {
		    int		  id;
			char	  name[32];
			char      sex;
			long long tel;	
			float	  hight;
	   };
		结构体定义完成，意味着出现了一个新的类型
		struct student;
		该类型和基本的数据类型可以通用，
			int		a；
			struct student b;
		结构体使用之前必须有类型的定义，再定义变量。
注意：结构体类型的定义有如下的变种；
	1、无名结构提
		struct
		{
			int id;
			char name[32];
		}xxx,yyy; //使用无名结构体定义的变量
		1.1 struct 没有结构体名称
		1.2 }和;之间必须有变量的定义，多个用,隔开
		1.3 其他结构提部分同标准格式结构体定义
	2、嵌套结构体的定义
		struct person
		{
			int				id;
			struct student	name;
			char			add[128];
		};
		struct person
		{
			int				id;
			struct student
			{
				int		  id;
				char	  name[32];
				char      sex;
				long long tel;	
				float	  hight;
			}stu;
			char			add[128];
		};
		
		struct student per;

		struct
		{
			int id;
			struct student name;
			char add[128];
		}abc,xyz;
		struct
		{
			int id;
			struct
			{
				int id;
				char name[32];
				float hight;
			}stu;
		}abc,xyz;
		以上嵌套定义无名结构体之后一定要跟变量
	3、类型别名  ==》 重定义 ==》typedef
		struct student
		{
			int id;
			char name[32];
			float hight;
		};
		struct student stu;
		struct student a,b,c;
	==>转换
	typedef struct student
	{
			int id;
			char name[32];
			float hight;
	}STU;  //有typedef 则STU是类型别名
	STU stu；
	STU a,b,c;

===================================================
结构提变量的初始化：
1、标准结构体的初始化
struct student a; //没有初始化的变量a；
struct student b={1,"zhangsan",1.85};//全部初始化
struct student c={2,"lisi"};//部分初始化
struct student d={3,1.65}; //错误
struct student e={0};
2、无名结构体初始化
	struct
	{
	   int id;
	   char name[32];
	}xxx={1,"zhangsan"},yyy={2,"lisi"};
3、嵌套结构体的初始化
	struct person
	{
		int				id;
		struct student
		{
			int		  id;
			char	  name[32];
			float	  hight;
		}stu;
		long long tel;	
	};
	struct person per={1,{20,"qiaomiao",1.70},123456};
4、类型定义后初始化
	STU a; //没有初始化的变量a；
	STU b={1,"zhangsan",1.85};//全部初始化
	STU c={2,"lisi"};//部分初始化
	STU d={3,1.65}; //错误
	STU e={0};
结构体变量的引用
1、直接引用==》"." ==>符号左边是变量的名称
	先定义变量并初始化，
	struct student stu={1,"zhangsan",1.70};
	引用变量：
		stu.id   ==> 1
		stu.name ==> zhangsan
		stu.hight==> 1.70
	
		stu.id = 20;
		stu.name = "zhangsan";//错误
		strcpy(stu.name,"zhangsan");
		stu.hight = 1.70;
2、间接引用==》"->" ==》符号左边是指针变量；
	struct student stu={1,"zhangsan",1.70};
	struct student *p = &stu;
	引用:
		p->id   ==> 1
		p->name ==> zhangsan;
		p->hight==> 1.70

=====================================================
结构体的指针：
	1、结构体本身的指针
		struct student stu,*pstu;
				int    a  ,*pa;
		以上变量都是随机值，指针是野指针
		struct student stu = {0};
		struct student *pstu = &stu;
	==>struct student stu = {0},*pstu = &stu;
	在访问成员变量过程中用
	pstu->xxx ;
	pstu->yyy;
	2、结构体成员变量是指针
		struct person
		{
			int id;
			char name[32];
		};
		
		struct student
		{
			int id;
			char *name;
		};
	3、嵌套结构出现指针
		typedef struct student
		{
			int id;
			char *name;
		}STU;
		typedef struct person
		{
			int id;
			struct student stu;
			char name[32];
			struct student *p;
		}PER;
		PER per;
		STU std;
		per.p = &std;
		per.id = 1;
		per.stu.id = 2;
		per.stu.name = "zhangsan";
		strcpy(per.name,"zhangsan");
		per.p->id = 3;
		per.p->name = "zhangsan";
		printf("%d %d %s %s %d %s\n",per.id,
									 per.stu.id,
									 per.stu.name,
									 per.name,
									 per.p->id,
									 per.p->name);
======================================================
5、结构体数组
	int a[10];
	struct student
	{
		int id;
		char name[32];
	};
	typedef struct student STU;
	STU stu[10];
	STU *pstu=&stu[0];

结构体的对齐方式：
	4字节对齐


作业：
	通讯录：请客户输入姓名和电话号码，保存在结构体中，按#退出，将所有信息打印输出
	设计一个计算器的数据类型可以表示两个数字和运算符，，再封装四个四则运算的函数，要求每隔函数只能有一个结构体参数，函数本身返回值只表示成功与失败
	eg:
		struct jsq
		{
			int a;   
			int b;
			char c;
			int ret;
		};
