数组 ==>构造类型数据

数组的学习：定义 初始化 应用
1、数组的定义
	格式：<存储类型>  数据类型 数组名称[整数表达式]；
		eg:				 int	 buff[10];
	含义：定义一个数据类型为int的数组名为buff,该数组
		  默认有10个数据成员
注意：
	1、数据类型可以省略，默认为auto，也可一定义其他
	2、数据类型可以是基本数据类型，也可是构造数据类型
	3、数组名称必须符合C语言规范，
	4、整数表达式，要求必须是整数，不能是负数或浮点数
特征：
	1、数组的[]中的整数为数组的下标,表示数组的元素个数
	eg:int buff[10]={0};
	10为下标，一共有10个int型的元素
	而且数组默认下标从0开始，10个下标0～9
	需要访问数组成员buff[n]    n 在0～9 严禁10
	2、每个数组元素默认在内存地址上是连续的，但是默认
	   的地址连续是以数据类型为单
	   char buf[10];buf[0],buf[1]...buf[9]
	   地址以单字节连续
	   int buf[10];buf[0],buf[1]...buf[9]
	   地址以4字节连续
	3、数组定义的存储类型决定了数组的初始值
		如果是auto定义在栈区，数据可能是随机值；
		如果是static在常量区，数据一定为0
2、数组的初始化：在定义的过程中给数组赋值
	1、不初始化：只定义不初始化，一般用于static定义或
				 全局变量定义的数组
	2、部分初始化：只将数组中的部分元素赋值
		eg:int buff[10]={1,2,3};
		==> a[0]=1,a[1]=2,a[2]=3;
		其他的可能是随机值
	3、全部初始化：将数组的每一个元素都赋值
		eg:int buff[5]={123,456,789,258,369};
		a[0]=123,a[1]=456,a[2]=789,a[3]=258,a[4]=369
	4、默认初始化：定义的时候一次行赋值
		eg: int a[5]={0};
		只能用{0}初始化所有的数据为0
	5、不定长初始化，说明数组的长度不确定
		eg:int a[]={1,2,3}	//不定长初始化
		   int a[];			//错误，不能定义空数组
		   int a[]={0};		//只有一个元素，没意义
		不定长初始化数组的大小由初始化值的个数决定
数组的应用：
	1、数组赋值
		int a[10]={0};  //定义并初始化
			a[5]=100; //数组赋值
	2、遍历赋值：
		int a[10]={0}
		for(i=0;i<10;i++)
		{
			a[i]=i;  //一种方法
			scanf("%d",a[i])//另一种算法
		}
	3、数组遍历
		for(i=0;i<n;i++)
		{
			printf("xxx",xxx);
		}
	数组的排序遍历
		1、冒泡遍历
			核心算法：
			for(i=0;i<n-1;i++)
			{
				for(j=0;j<n-i-1;j++)
				{
					if(a[j]>a[j+1])
					{
						t=a[j];
						a[j]=a[j+1];
						a[j+1]=t;
					}
				}
			}
			for(i=0;i<n;i++)
			printf("%d ",a[i]);
	2、选择排序
		for(i=0;i<n;i++)
		{
			min = i;
			for(j=i+1;j<n;j++)
			{
				if(a[min]>a[j])
					min= j;
			}
			if(min!=i)
			{
				t = a[i];
				a[i]=a[min];
				a[min]=t;
			}
		}
=========================================
字符数组 ==》 字符串 
定义：<存储类型> 数据类型 数组名[整数表达式]
					char	c[10];
初始化：
部分初始化：char c[10]={'n','i','h','a','o'};
			char c[10]={"nihao"};

全部初始化: char c[5]={'a','b','c','d','e'};
用字符串初始化：char c[]="nihao";
	注意：
		char c[10]; c="nihao"; ：//错误
					c[0]='n';
					c[1]='i';
格式化输入输出对应与字符数组
	1、输入scanf("%c",&c);
		   scanf("%c",&c[i]);i数组的下标
		   scanf("%s",c);//以字符串形式存储与c字符数组
	2、输出printf("%c",c);//单个字符C输出
		   printf("%c",c[i]);//输出字符数组中下标为i的
								字符
		   printf("%s",c);//以数组形式将字符串输出
字符串和字符数组的区别和联系:
	C语言中没有一个用于表示字符串的关键字
	c语言的字符串由C的字符数组变形而成，末尾加上'\0'
		字符串比字符数组多一个'\0'
联系：
	都是一数组形式存储数据，字符之间地址连续，可以用下标来访问，同样的数据如果以字符数组和字符串存储大小有区别，字符串比字符数组大一个'\0'，

字符串常用的操作函数：
strlen :字符串长度
strcmp :字符串比较
strcpy :字符串拷贝
strcat :字符串拼接











		
