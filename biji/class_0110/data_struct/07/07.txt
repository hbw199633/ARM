/* ************************************************************************
	> File Name: 07.txt
	> Function: 
	> Author: hlq
	> Mail: hlqlinux@gmail.com 
	> Created Time: 2017年02月21日 星期二 09时30分28秒
	> Version: v1.0
 ************************************************************************/

 数据结构之非线性结构	===》 树，二叉树，图

 树	===》 根	====》 root节点（/）

数据结构的树	===》 一棵有根节点并从根节点
分出多个分支的数据形式。

数据结构的森林	===》 0棵或者多棵互不相交
的树的集合。

数据结构树的性质：
1. 有且仅有一个称为root的根节点。
2. 其他非根节点都是互不相交的节点子集。
3. 根节点没有直接前趋。
4. 叶子节点没有直接后继。

树的度的概念：
	节点的度：从节点出发的分支个数。
	树的度：任意节点的度的最大值。
	树的高度（深度）：从根节点到叶子节点的
	最远节点个数。

树的表达方式：
	1. 树形表示法
	2. 目录表示法

树的特性 ===> 二叉树

特性：3 4 5 5
3: 3个关键语句：有限集合 互不相交 左右之分
4: 4种遍历方式：先序遍历 中序遍历 后序遍历 层序遍历
5: 5中不同状态：空 根 左 右 全
5: 5种不同的性质
	1. 二叉树的第i层最多有2^(i-1)个节点。
	2. 二叉树的高度为k，则最多有2^k -1个节点。
	3. 二叉树的叶子节点个数 -1等于非叶子节点的
	的度为2的节点的个数。
	4. 满二叉树，一个深度为h的二叉树有2^h-1个节点。
	5. 满二叉树和完全二叉树的区别。


树的4种遍历方式：
先序遍历：
	根	左	右
中序遍历：
	左	根	右
后序遍历：
	左	右	根
层序遍历：


二叉树的构造;
	二叉树的顺序存储	===》 小层树的满二叉树使用。
						用意：避免内存浪费。
	
	二叉树的链式存储    ===> 常用的存储方式。

节点结构体：
typedef int datatype;

typedef struct node {
	struct node * lchild;
	datatype		data;
	struct node * rchild;
}bitree;






