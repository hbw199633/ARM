/* ************************************************************************
	> File Name: 01.txt
	> Function: 
	> Author: hlq
	> Mail: hlqlinux@gmail.com 
	> Created Time: 2017年02月13日 星期一 09时35分54秒
	> Version: v1.0
 ************************************************************************/

 纪律：
 	迟到(礼拜一除外)，迟到50个,9:10之前，超过
1分钟加一个
	上课期间手机不能响

 hello world
 定义两个指针，dlrow olleh
 打印输出 %s 

eg: char buf[] = "hello world";
 		常量 		10 

======================================

	逻辑结构， 数据的存储, 数据的运算

逻辑结构：线性结构，非线性结构

顺序表：
	增加，删除，修改，查找

单链表

单项循环链表

双向循环链表

栈

队列

树

(图)

查找排序


md5





练习：
	指针数组,字符串冒泡排序

char *p[] = {"hello", "world", "this", "good", "well", "best"};

best good hello  this  well world 
 

md5sum    filename

算法的衡量标准：
	有穷性，确定性，可行性，输入，输出
时间复杂度：评判一个算法好坏的标准
	代码执行的频度

时间复杂度如何计算：
Tn = O(n);
1. 将所有执行语句的频度相加
2. 将最终的表达式和为一个多项式
3. 将多项式中的常数项去掉
4. 只保留多项式的最高阶
5. 去掉最高阶的系数
6. 最后剩余的n的关系式即为当前代码的时间复杂度



练习：编写一个程序，完成获取用户输入两个整形数，
计算最大公约数以及最小公倍数，并计算其
时间复杂度。



数据结构提的实例：线性表之顺序存储

线性表：包含若干个数据元素的一个线性序列,
其中a0为首元素，an为尾元素，ai为中间元素，
a0没有直接前驱，an没有直接后继，ai有一个直接
前驱和一个直接后继,我们称之为线性表。

L = (D,R)	D 数据元素，R元素之间的关系

线性表的存储方式：
	顺序存储
	链式存储


顺序存储：
	特点：
	1.所有的元素存储位置连续(数组）
	2.存储方便，遍历效率高
	3. 插入和删除效率较低

顺序表的操作：
1. 创建顺序表
2. 遍历顺序表
3. 增加数据
4. 删除数据
5. 修改
6. 释放顺序表

arr[i] = p[i] = *(arr+i) = *(p+i);


p[i] ====> *(p+i);

typedef struct {
	datatype data[N};
	int last;
}seqlist;


尾部增加函数
int add_tail_seqlist(seqlist * seq, datatype value)
{
	核心代码：
	seq->data[seq->last] = value;
	seq->last++;
}

按位置进行插入

int add_pos_seqlist(seqlist * seq, int pos, datatype value)
{
	核心代码：
		for (i = seq->last; i > pos-1; i--)
		{
			seq->data[i] = seq->data[i-1];
		}
		seq->data[i] = value;
		seq->last++;
}


修改功能,按值进行修改

int modify_value_seqlist(seqlist * seq, 
		datatype oldvalue, datatype newvalue)
{

}


删除功能

int delete_value_seqlist(seqlist * seq, datatype value)
{

}

按位置进行删除

int delete_pos_seqlist(seqlist * seq, int pos)
{

}




