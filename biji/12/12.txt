函数 ==》重点
函数的概念：
	在C语言中，具有一定功能，相对独立的程序段(模块)称为函数，函数返回值可有可无
函数的作用:
	1、提高代码复用率，使代码模块化。
	2、规范代码逻辑，控制代码中的异常范围。
函数的分类：
	1、系统函数
		1.1系统调用函数==》open() read() write()
					   ==》man 2 xxx
		1.2系统库函数  ==》printf() scanf() getchar()
					   ==》man 3 xxx
	2、用户自定义函数  ==》自己编写的函数
函数学习的重点：
	1、函数的定义格式
	2、函数的调用规则
	3、函数的声明语句
	4、函数的参数传递
1、函数的定义格式
	<存储类型> 数据类型 函数名称(行参列表)
	{
		函数体；
	}
	eg:int main(int argc,char *argv[])
		{
			printf("hello world\n");
			return 0;
		}
	注意：
		1、函数定义时，{}不能省略
		2、函数名称的命名必须符合C语言命名规范
		3、函数的数据类型可以没有，
			如果没有则函数体中不须要return xxx,最好在函数定义的时候加void说明，
			如果有数据类型就必须加return xxx,而且要保证xxx的类型与函数数据的类型兼容
		4、函数的参数也可以没有，
			如果没有参数，则写void或者什么都不写
			如果有参数，要写参数的类型和名称，如果有多个参数用,隔开。注意函数的参数的类型可以不一样。
		5、每个xxx.c的源代码文件只能有一个main函数表示程序执行的入口位置。
		6、函数在执行过程中遇到return关键字跳出当前函数，如果在main函数中return则结束程序
		7、函数在定义过程中，尽量不要嵌套定义，一般一个函数都是独立成为模块。
	练习：jsq封装 + -  * / 
函数的调用：
	1、函数有返回值的情况
		返回值 = 函数名称(实参)；
		int ret =  add(1,2);
	2、函数没有返回值的情况
		函数名称(实参)；
		printf("hello world\n");
	3、实参和形参
		形参：形式参数，只是占位没有具体数据
			  函数定义时使用，相当与局部变量
		实参：实际参数，是实际数据或者有值的变量
			  在函数使用过程中，不要写类型
	4、函数的定义一定要出现在函数的使用之前
	   函数的声明：提前将函数的形式表示一遍
	声明的格式：
		<存储类型> 数据类型 函数名称(行参列表)；
	eg:  extern		int			add(int a ,int b);
	注意：
		一般函数的声明都固定在xxx.h中，xxx.h一般对应一个xxx.c的源文件
		函数的声明过程中可以没有形参名称，但是必须类型
		函数的声明之后必须有；
=====================================================
函数传参数
	1、按值传递
	2、按地址传递
	3、按数组传递
	4、全局变量
1、按值传递==》形参 每次 拷贝 实参的数据值并在函数内部处理
	适用范围：
		每次都是在函数内部对于该数据做运算不须要修改数据本身的值
		练习：用户输入任意一个字符，封装一个函数，可以输出该字符对应的8进制，10进制，16进制的数值
2、按地址传递==》将实参的地址传给行参，在函数内部使用地址形式修改地址相关的变量的内容
	本质还是值传递，只不过传递的值不是数据而是地址
	2.1数据的传入：
		在swap.c中远程操作a地址和b地址的值
	2.2数据传出：
		在jsq_point.c中将函数的输入模块事先封装定义变量，在函数中为变量赋值，方便数据导出。
3、按数组传递==>传地址的变形，本质还是传地址
	定义格式：xxx(数组名[]，数组大小);
	等价于：  xxx(指针)
	调用格式：xxx(数组名称，大小)；
4、全局变量：==》不是传参数，但是能达到同样的效果
	全局变量一般用于全局开关










作业：
	创建string目录，在目录中创建strcat,strcmp,strcpy三个目录，在strcat中写main.c strcat.c strcat.h,编译改名为mystrcat
