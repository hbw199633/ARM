gdb调试器
	1 gcc xxx.c -g
	2 gdb ./a.out
	3 打断点 b main (b 函数名)
			 b 10   (b 行号)
	4 r (run) 
	5 n (下一步，不进入函数)
	  s (下一步，进入函数)
	  p x(查看x的值)
	6 q 退出
fdisk -l 查看分区节点
fdisk /dev/sdb
m	清单
n   创建新的分区
d	删除一个分区
p	查看分区
q	不保存退出
w	保存退出
===============================================
变量==》可以变化的量
定义变量：
	格式：<存储类型> 数据类型 变量名
	eg:					int     a
1、<存储类型> 可以省略，一般有以下四种形式。
	auto	自动变量，可以省略，存储在栈区
	static  静态变量，不能省略，存在与静态区
	extern  外部变量，不能省略
	register寄存器变量，一般不用
int a ;默认等于 auto int a;
auto 变量在作用域结束即消失
static int a ；==>地址离入口函数不远
static 变量作用于整个函数的生命周期
extern 表示变量不再当前文件中，属于当前的工程文件
register int c;
栈区：表示一个函数的内部局部变量，当函数结束后，变量的空间会被释放掉
堆区：动态存储，需要程序员手动申请，当函数结束后，需要手动释放空间（手动申请，手动释放）
		申请函数（malloc,realloc） 释放函数（free）
静态区：主要放全局变量，static修饰的变量

2、数据类型：基本的数据类型，构造数据类型
	int a；
	char b;
	struct xxx c;
	注意：定义数据类型一般考虑数据的实际范围
3、变量名：自定义变量名称 ==》C语言的规范
	3.1、不能与关键字冲突 int char;错
	3.2、不能以数字开头 int 9c；
	3.3、所有的命名数字+字母组合允许下划线
		==》int a8_x 正确  _a8x
		==》int a/x  错误
		==》int a=8  错误
习惯：
	1、名称长度不要超过10个字母
	2、命名方式：驼峰式命名 下划线
		驼峰式：GuoHao
		下划线：Li_wen_wu _liwenwu 
	3、命名细节：根据不同公司的编码规范执行
		产品缩写_模块名称_变量名称
		qq_group_abc;
		qq_group_abc();
注意：C语言中约定变量你需先定义后使用！！！
变量的使用：
	1、变量的初始化： 定义变量是可以同时初始化
		auto 定义变量时不初始化会有垃圾数据产生
		变量类型  变量名称	=	初始化值
			int		a		=	 0;
		static 定义时变量可以不初始化，默认是0
		全局变量定义时可以不初始化，默认是0
		char 初始化时可以为整形常量也可为字符形常量
		eg: char a = 'a'
			char a = 0;
			char a = 65;
	2、初始化的赋值
		int a;  //变量的定义
		a = 100;//变量的赋值
		int a = 100；//变量的定义并赋值
	注意：赋值符号"="
		  赋值时"="左边必须是变量,右边必须是表达式语句
		a = 100;
		a = b + c;
		a = fun();
	变量在复制的过程中可能出现类型的转换
3、数据类型的转换
	3.1、显示转换 
		格式 目标变量 = (目标类型)表达式；
		eg : float a = (float)b;
	3.2、隐式转换 == 赋值的过程
		1、默认转换向=的左边对齐
		2、表达式中有多个类型则向大字节对齐
		char=>short=>int=>long=>float=>double
	练习：
	完成字符和数字之间的显式和隐式转化
====================================================
ctags 
	第一步：ctags -R
	第二步：vim xxx.c
	第三步：光标移动至所需要找的函数名
	第四步：ctrl+] 跳转至该函数
			ctrl+t 返回上次所在函数
	第五步：q退出
===================================================
作业：
成绩评分ABCD
