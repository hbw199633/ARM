内存管理：
Makefile

内存管理 ==》每一个进程都有4G的虚拟内存
虚拟内存的划分：
由低地址向高地址：
代码段==》静态(常量)存储区==》堆区==》栈区==》OS
	内存管理区域==》静态存储区、栈区、堆区
	内存管理方式==》申请   释放
静态存储区：申请  程序启动时候变量定义
			释放  程序结束自动释放
	注意：在运行期间，静态存储区只能用不能放
栈区：申请	在作用范围内的第一次变量申请
	  释放	作用域结束的位置自动释放
	注意：栈区申请的变量一定要初始化，否则会有随机值
堆区：申请	使用malloc函数向系统申请变量空间
	  释放	使用free函数显示释放
	注意：申请和释放必须完整，否则会存在内存泄漏
堆区内存管理：==》stdlib.h
1、申请 void *malloc(size_t size);
	功能：向操作系统申请指定大小的空间。
	参数：size要申请的空见大小，单位字节
	返回值：void* 纯地址
			成功 返回申请到的内存空间
			失败 NULL
2、释放 void free(void *ptr);
	功能：将之前申请的内存释放
	参数：ptr是void *的纯地址，要释放的内存地址
	返回值：无

练习：分别向堆区申请以下类型变量并保存数据
	  char float 字符串

	内存管理中堆区使用的雷区
	1、申请不一定成功，malloc的返回值
	2、申请成功不一定能用，清空内存
	3、使用过程中不能越界
	4、释放要完整
	5、释放后一定要归0并保证单次释放

perror
#include <stdio.h>
void perror(const char* s)
功能：打印系统中的标准错误
参数：字符串
返回值：无

bzero
#include <string.h>
void bzero(void *s, size_t n);
功能：清除大小为n的数组
参数：指针或数组 ，大小
返回值：无

memset
#include <string.h>
void *memset(void *s, int c, size_t n);
功能：将数组中的字符设定为特定的c
参数：
返回值：成功 字符串的首地址
		失败 NULL

valgrind-3.2.3.tar.bz2工具的使用
	1、安装
		tar -jxvf valgrind-3.2.2.tar.bz2
		cd ./valgrind
		./configure //Valgrind requires glibc version 2.2 - 2.5
		make
		make install
	2、安装
		valgrind-3.8.1-3.2.el6.i686.rpm
	3、使用
		valgrind --tool=mencheck ./a.out	
	//第三方工具 valgrind 的内存检测功能
	//检测自己的a.out的程序是否存在内存泄漏
==================================================	
make 工程管理器 ==》linux系统中管理多文件编程的工具
	用于编程过程中多个资源文件之间编译
	符合大部分liunx下软件之间控制流程：
	make 工程管理器工具默认安装
	对应的配置文件需要程序员制定：makefile Makefile
	执行make操作默认查找以上两个文件并执行文件规则
执行：
	在工程目录下执行make命令会自动按照makefile编译

makefile的文件编写规则：
目标文件:依赖文件
<TAB> 执行命令  
	make编译过程会根据工程中的每个文件的时间戳来决定是否参与编译

make直接回车默认生成第一个目标文件

make xxx 只生成xxx相关的目标，xxx只能是makefile的目标
makefile的变量
	1、自定义变量
	2、系统变量
	3、自动变量
1、自定义变量==》替代大量出现的重复字符串
	格式：变量名 = 目标字符串
	使用：$(变量名)
	eg: OBJS = xxx.o yyy.o zzz.o
		$(OBJS) 代替
2、系统变量 ==》系统内置的用特定含义的变量
	FLAGS = -Wall -g -c
3、自动变量==》$^ $@ $<
	$^:所有的依赖文件
	$@:默认的目标文件
	$<:第一个依赖文件

	* 任意文件
	% 代表一个同名文件
	.PHONY:伪目标
	#为注释行
