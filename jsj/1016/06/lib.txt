静态库和动态库 

linux中库的识别：
	静态库： xxx.a
	动态库： xxx.so

windows中库的识别：
	静态库：xxx.lib
	动态库: xxx.dll

环境：
Linux  2.6.32-431.el6.i686 

1、静态库的制作与使用：



   1.1 编写功能函数文件和接口文件：
		   fun.c          fun.h
	   注意：fun.c中不能有main函数，只能是函数的功能实现。
	   fun.c中可以有多个功能函数的实现，fun.h中不一定要
	   全部将fun.c的功能函数声明，只提供必要的接口函数声明。

	1.2 编译功能函数为目标文件
		gcc -c xxx.c -o xxx.o
		问题：xxx.o 能不能和功能函数名称不同 ===>可以
			  xxx.c 能不能是多个.c 文件      ===>不可以
			  xxx.o 能不能有多个.o 文件      ===>可以


	1.3 制作静态库：
		ar crs libxxx.a  xxx.o
	注意： 制作的静态库，必须以lib开头，必须以.a后缀结尾。
		   lib和.a中间由程序员自定义。

	问题： 能不能多个.o文件生成一个 .a 文件  ===>可以
			  

	1.4 使用静态库
		1.4.1 编写调用库函数的主调度程序main.c

		1.4.2 在main.c代码中添加功能函数头文件和函数调用

		1.4.3 将main.c和静态库同时联合编译
			  gcc main.c -L. -l fun
			  -L.  ==>库的路径在当前路径
			  -l   ==>表示库的名称
		问题：功能函数文件调用失败的处理方式？===>根据函数返回值处理，接口文件必须说明
		      功能函数中是否应该用printf函数？===>功能函数尽量不要直接输出屏幕


		1.4.4 启动程序验证效果。
		
		问题：运行阶段能不能删除库文件和功能函数文件？===》可以


练习：
	设计一个静态库，其中有多个函数，分别可以传入不同的参数
	并执行不同的效果，然后用main.c测试功能。

   dynamic
2、动态库的制作和使用：
	2.1 编写功能函数和接口文件 ,类似与静态库流程。
			fun.c     fun.h
	2.2 将功能函数编译生成目标文件
			gcc  -c xxx.c -o xxx.o

			可能： gcc -m32 -fPIC -c xxx.c -o xxx.o
	
	2.3 制作动态库：
		  gcc  -shared -fPIC fun.o -o  libfun.so

		  -shared  ===>生成的目标是共享库== 动态库
		  -fPIC    ===>生成的目标库与位置无关特性
		  libfun.so ===>必须以lib开头，必须以.so结尾
			
		问题：能不能多个目标文件生成一个库文件？===>可以
			  库文件的名称能不能和功能函数名称不同？ ===》可以

	2.4 拷贝动态库到系统路径 <=== PATH 的环境变量都可以
		  cp libfun.so  /usr/lib
		  或者 cp libfun.so  /lib
		
	    问题：如果不拷贝能不能运行代码？有什么问题 ？
			  ===》可以不拷贝。
			  ===》libfun.so 默认在当前路径存放
			  ===》当前目录是编写代码的工程路径不是程序运行的工作目录


	2.5 使用动态库
		2.5.1 编写主调度的测试代码main.c 
		2.5.2 在main.c中添加库的头文件和调用库中函数
		2.5.3 联合main.c libfun.so 进行编译
			 gcc main.c -L/usr/lib  -l fun
		2.5.4 启动执行目标程序，验证效果
		
		问题：编译完毕能不能删除动态库？===>不能删除

		2.5.5 使用ldd xxx 查看是否有动态库支持

练习：
	将之前用静态库制作的测试流程再用动态库实现一遍。


静态库和动态库的本质区别： 两者加载的时刻不同。

静态库的加载是在编译阶段，打入目标程序内部，可能使目标程序体积增加。
动态库的加载是在运行阶段，没有打入程序内如，在程序运行过程中调度，
相对不会增加目标程序的体积。
