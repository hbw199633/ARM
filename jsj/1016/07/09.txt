多进程之回收资源：
pid_t waitpid(pid_t pid, int *status, int options);
功能：该函数可以指定回收进程的资源信息。
参数：pid 要回收的目标进程pid号，
		特殊： pid > 0 要回收的目标pid
			   pid = 0 相同组id的进程
			   pid = -1 任意子进程，等价于 wait
			   pid < -1 按照pid的绝对值等于组id的进程
	  status 表示要回收的子进程资源信息，可以用WEXITSTATUS宏
	         获取其数据值；
	  options 回收子进程资源的方式，0 表示阻塞回收
			  WNOHANG 表示非阻塞回收
返回值：成功  回收资源的pid号
		失败  -1
		没有回收到资源  0



多进程编程的框架：
 fork  ===> exit() ====>wait()

=============================================================

多进程的主用用途：

1、exec家族函数 ====>摆脱单文件写两个进程的复杂操作
					 使用exec家族函数完成其他程序的启动。

man  execl ===>#include <unistd.h>
l == list    v == vector  p == programer


int execl(const char *path, const char *arg, ...);
功能：该函数可以用于启动一个指定路径+名称的程序。
参数： path 要启动的程序的路径+名称，一般是绝对路径。
       arg  要启动的程序的选项，一般类似于 argv[0] argv[1] ...
	   ...  表示启动程序的参数，为可变长参数。
	   所有的参数到最后必须以NULL结尾。

返回值：成功 没有返回，当前进程空间转嫁到目标程序
		失败 返回errno

练习：
1	编写fork父子进程程序，并在子进程中启动一个系统命令
	将该命令执行的结果从父进程中获取并将结果值打印输出。

2   独立编写一个自己的程序，可以单独运行，再编写父子进程
    程序并在父子进程程序中启动独立程序完成功能显示。


int execv(const char *path, char *const argv[]);
功能：该函数可以将指定路径+名称的程序启动执行。
参数：path 要启动的程序路径+名称
	  argv[] 要启动的目标程序参数所构成的字符串数组；
返回值：成功 不会返回，会转嫁到目标程序
	   失败  -1；


练习：
1	编写独立程序并允许传入参数，确保该程序可以独立运行。
	再编写父子进程程序，在父子进程程序中以多个参数的形式
	启动独立程序并运行查看结果。


2   如果该独立进程程序一直处于运行状态，父子进程程序如何
    判断并结束该独立程序。

	itoa 函数封装完毕：



========================================================================

int execlp(const char *file, const char *arg, ...);
功能：该函数可以启动指定的程序。
参数：file 要启动的程序名称，同时该程序要位于系统环境变量范围内 。
	  arg  ...  启动程序的参数，参考 execl 一样
返回值：成功  不会返回
		失败   -1
			
int execvp(const char *file, char *const argv[]);

练习：
	自己编写一个b.out程序，尝试使用以上两中方式启动执行。






exec家族函数测试题：

1、使用任意一个exec家族函数封装完成一个自己的 mysystem函数，
   可以完成类似system(）函数的调用效果。

	比如： system("ls -l -a");

		  mysystem("ls -l -a");  

2、使用任意一个exec家族函数设计一个自己的终端解释器，可以完成
   类似常规bash的效果。比如
   myconsole>>ls
   .......

   myconsole>>ps
   ......

   myconsole>>exit  终端退出。。。

   myconsole>>xxx
   不可识别的命令


3、设计一个并发程序可以完成指定目录中文件内容的统计工作。
   要求如下：
      ./a.out   /etc
   将/etc目录中所有的非目录文件的文件行数 大小 统计出来
   最终写入一个结果文件中。结果文件中个数如下：

   xxx.c   100行  200字节
   abc.h   2345行 3453245字节
   xxx.txt 235行  234字节












