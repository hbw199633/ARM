多线程编程：

1、pthread_create()

2、pthread_t pthread_self(void)
   功能：该函数可以获取当前线程的tid号并返回；
   参数：无
   返回值：成功 当前线程的tid号
	       失败 -1;


3、共享资源：
	3.1 全局变量
	3.2 静态变量
	3.3 栈区变量
	3.4 堆区变量
	3.5 常量  =====>?
	以上进程的4g虚拟内存全部可以共享使用，但是必须确保使用的
	是同一内存地址。
	以上都是共享资源，那些是线程的私有资源。  tid 是私有的  ？
	线程1 中定义的栈区，静态 ，堆区 变量在线程2 中能不能使用。是共享的，能用？



4、速度差别：
	主线程执行速度快于子线程；
	各个子线程之间属于平行执行；
	

5、线程的退出：
	5.1  在子线程内部执行 return 可以退出线程；
	5.2  pthread_exit(); 可以在线程执行过程中退出线程；
	5.3  pthread_cancel()； 可以在其他线程中杀死执行线程；

	void pthread_exit(void *retval);
	功能：该函数用于线程自身结束并退出当前线程；
	参数：retval 线程退出时候的返回值；
	返回值：无

	int pthread_cancel(pthread_t thread);
	功能：该函数可以用于结束指定线程的运行；
	参数：thread 要结束的目标线程tid号
	返回值：成功 0
			失败 -1；
	
思考题：
1、如果子线程和主线程在运行过程中退出的时机不同，
   会不会和进程一样出现僵尸线程和孤儿线程？
	 没有僵尸线程；
	 主线程和子线程同时结束，不存在孤儿线程；


2、pthread_cancel能不能在平级子线程之间使用，将
   执行的平级线程强制杀死？
   子线程能不能杀死主线程？可以，所有子线程结束进程结束。
   子线程能不能杀死自己？可以 。




子线程的资源回收： pthread_join()
int pthread_join(pthread_t thread, void **retval);
功能：该函数用于阻塞等待回收执行线程的资源。
参数：thread  要回收的目标线程tid；
	  retval  回收的目标线程返回值；如果不关心返回值用NULL；

返回值：成功0
	    失败 -1；


思考题：
1、回收子线程的资源如何获取其返回值；

void pthread_exit(void *retval);

int pthread_join(pthread_t thread, void **retval);





如何返回一个数字并回收该数字；

    pthread_exit( (void*) 8);
	
	int a= 0;
	pthread_join(tid,(void**)&a);
	pirintf("a = %d \n",a);

	void* ret = NULL;
	pthread_join(tid, &ret);
	printf("ret value = %d \n", (int)ret);


	字符串并回收字符串
	
	结构体并回收结构体
	
	数据常量并回收该常量




2、平级线程之间能不能回收平级的线程资源；
	可以回收。


线程的传参：pthread_create()

1、传入数字型变量
2、传入字符串型变量
3、传入结构体型变量
4、传入常量



作业：
	设计多个(3个以上)子线程同时运行，要求每个线程退出的时机
	不同，如何在线程中不阻塞回收每个子线程,要求谁先退出就
	立即回收该子线程。
	

	


