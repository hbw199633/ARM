c++ 特性之 继承

问题：
1、基类能不能访问子类的成员？
	animal  a;
	pet     b;
	实例化后的对象之间基类不能直接访问子类；
	animal *pa = &b;
	pa->show();
	pa->x = 100;
	如果子类中完全继承类父类的函数和变量可以访问；


2、子类能不能访问基类的静态成员？
	静态成员 ====》静态属性  静态方法

	非private静态成员都可以访问；
	
	静态成员能不能被继承？ 不能被继承可以共享
    

3、子类与基类的构造函数谁先执行？
   构造和析构的次序是什么样的？

	Pet b；
	基类构造
	子类构造
	子类运算逻辑
	子类析构
	基类析构

	思考题：如果基类的构造函数是带参数的子类如何
			定义自己的构造函数===>在子类构造函数
			位置给基类传参：

			如果基类与子类的构造函数都是带参数的
			如何使用；

多次继承与多源继承：

多次继续：
	class a;
	class b: public a;
	class c: public b;
	class d: public c;
	===>c d 就属于多次继承；

	多次继承会将最后一次继承前的所有基类信息
	对应的内存全部拷贝；如果在多次继承过程中
	有信息重合则最后一个类的成员覆盖前面的成员
	否则重载；

多源继承：
	class a;
	class b:public a;
	class c:public a;
	class d:public b,public c;

	===》 d 类就属于多源继承；

	对于多源继承的可能存在的相同变量会出现歧义，
	所以在继承的时候要加入 virtual关键字以避免
	同名冲突；

	class a;
	class b: virtual public a;
	class c: virtual public a;
	class d: public b,public c;
	===>d中将只保留一份a类的内存；

思考题：
	在多源继承中如果出现基类中的方法被
	多源继承会 覆盖  重载  冲突 ?

	如果：a b c d都有方法 ===》编译有歧义，冲突。
	如果：a b c 都有方法  ===》编译有歧义，冲突。
	如果：b c d 都有方法  ===》编译有歧义，冲突。
	如果：a b c d 任意一个只有一个的是编译通过。
	如果：a b c d 任意一个函数都参数不同或个数不同
		  才能完成重载。

==============================================================

c++ 面向对象之  多态

概念：
	多态性是指不同对象对于同一个消息有不同的行为；

多态的实现：
1、 重载 =====》编译时候的多态；  === 早绑定

2、虚函数 ====》运行时候的多态；  === 晚绑定


虚函数的一般格式：
  virtual 类型  函数名称 （形式参数列表）
  {
		//函数体
  }

eg： virtual int show()
	 {
		cout <<"hello " <<endl;
		return 0;
	 }


注意：
1、必须是基类中使用虚函数，子类要对该虚函数完成实现；

2、只有基类有虚函数则才可以发生多态效果，否则按照默认
   的普通方式执行；

规则：
1、如果子类与基类的函数同名，但是参数不同，则无论是否
   有virtual修饰，基类的函数都自动隐藏，实现子类重载；

2、如果子类与基类有函数同名且参数相同，但是没有virtual 修饰，
   则基类的函数会被子类函数覆盖 ===》重写；

练习题：
	设计一个汽车类，同时从该类中继承出两个独立的子类分别
	为轿车类和卡车类，在设计一个红绿灯类，在红绿灯类中有
	一个方法称为 stop() 该方法有参数是 汽车类的指针，要求
	在该红绿灯类的stop方法中根据传入的汽车子类不同实现
	多态性；

	比如：li.stop(qc);  ====>汽车停止
		  li.stop(kc);  ====>卡车停止
		  li.stop(jc);  ====>轿车停止


抽象类：===》纯虚函数 ===》 virtual int test() =0;

凡是某个类中具有纯虚函数则该类就是抽象类，且不能实例化；

============================================================
c++ 之 文件io

头文件有变更：

#include <fstream>

框架类似于c语言的过程：

打开文件 ===》读写文件(定位) =====》关闭文件

打开文件的时候要确认文件的打开方式：

如果文件是要读操作：
  ifstream 类来创建一个 类对象： 
  ifstream read_file;

如果文件是要写操作：
  ofstream 类来创建一个 类对象：
  ofstream write_file;

1、文件读方式打开：
	ifstream read_file;

	read_file.open("./abc",ifstream::in);

    while (infile.good())
        cout << (char) infile.get();

	infile.close();

	===>详见：file_read.cpp

2、文件写方式打开：
   ofstream  write_file;

   write_file.open("./def",ofstream::out|ofstream:app);

   write_file<< "asdfasfdadsf"

   write_file.put('x');

   write_file.close();

   ===》详见： file_write.cpp

练习题：
	根据以上知识点，完成一个基于c++文件io的文件拷贝程序；


补充：c++ 文件io中的定位操作：seekg  seekp

istream  seekg ( streamoff off, ios_base::seekdir dir );
ostream  seekp ( streamoff off, ios_base::seekdir dir );

off 文件内部的偏移量
dir 要偏移的起始位置： beg   从文件开头偏移
					   cur   从文件当前位置偏移
					   end   从文件末尾位置偏移

详见代码： file_seek.cpp

============================================================













