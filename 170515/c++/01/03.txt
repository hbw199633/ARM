c++ 之面向对象编程：

面向对象：分析解决问题的时候针对某一个具体的实例；

面向对象编程的方法：
	封装    继承   多态

===》抽象某个功能的具体实现需求===>属性/方法
===》class ===>类 《=== 抽象的模板

早期的c中的结构体就是现在c++ 的类模型；

结构体：
struct  test
{
	int		id;
	char    name[32];
	float   score;
};


类的一般定义：
class 类名称/test
{
	////属性
	int    id;
	char   name[32];
	float  score;

	///方法
	int	   show();
	void   play();
};

class 与 c中struct 区别：
1、能声明函数
2、默认权限是私有；

所以类的声明一般如下：
class  student
{
	private:       ///私有权限，只能给自己访问
	int		id;
	char	name[32];
	float   score;

	public:		   ///公开权限，可以给任何人访问
	int		show();
	int     study();

	protected:     ///保护权限，只有自己人才能访问
	int    car();
	int    house();
};

以上只是一个类模板，还不是类的实例；

构造一个类实例的一般形式：

class 类名   变量名称；
eg： class student   stu;  ////stu 就是类的一个实例

类名  变量名称；
eg： student  stu1; ///stu1 也是一个类的实例

实例的访问方式完全类似与结构体：
1、直接访问方式"."
	stu.id  
	stu.name
2、间接访问方式 "->"
	pstu->id
	pstu->name

练习题：
	根据以上知识点，设计一个学生类，至少包含笔记
	中学生类的所有属性和方法，然后在main中定义用
	该类实例化一个类对象，并完成学生学习的方法设置
	和显示；


类的构造函数/析构函数

不论是否自定义以上函数，系统会自动生成一个空函数；

如果要自定义函数则必须满足如下要求：
1、构造函数必须与类同名；
2、构造函数必须没有返回值；
3、构造函数在类实例化的时候自动执行；
4、构造函数只能有一个不能有多个,但是可以重载；
5、构造函数可以用于私有变量的初始化；


练习：
	设计一个学生类，并设计其构造函数，要求
	在对象初始化的时候可以指定学生姓名和id
	并在对象创建之后动态可以修改学生的成绩
	并打印学生的所有信息；
	
思考题：
1、构造函数中能不能cin ===》可以

2、构造函数的参数如果和类的私有属性同名如何处理？
	this指针表示当前类
	this->id  ==  student::id

3、构造函数能不能在其他的函数或者逻辑中调用？
	构造函数只能在实例化对象的时候自动调用
	而不能手工在其他位置调用；===》不能显式调用

4、如何在构造函数中申请堆区内存并返回该地址；
	 在私有变量中定义 指针类型变量在构造函数
	 中给私有的指针变量申请内存

	 在构造函数传参的时候传入一个地址变量
	 在构造函数中给该变量赋值堆区地址

==================================================
析构函数 ===>类对象在消亡的时候自动执行的函数

一般格式：
	~类名称(); 
eg: ~student();  //要求必须以"～"开头；


特点：
1、析构函数不能有返回值，也不能有参数；
2、每个类只能能有一个析构函数且不能重载；
3、析构函数会在对象消亡的时候自动执行；
4、析构函数用于释放构造函数申请的空间；
5、析构函数可以显式调用；

类的全局变量 ====>对类中一种特殊类型的数据进行
				  全局控制；
4、静态变量 ===>在类的设计时候定义

	4.1 静态属性：
		定义格式： static  类型 变量名称；
		eg：       static  int  id;
		注意：该属性必须有类对象本身维护而与
			  实例化对象没有直接关系；
			  一般情况下静态属性都是私有变量；

	4.2 静态方法：
		定义格式： static 类型 函数名称(形参列表)
		eg：       static int  set_id(int i);
				   static int  get_id();
		注意：该方法一般要具有公开属性，用于
			  对封装的私有静态成员访问控制；

			  类的静态成员在没有实例化对象的时候
			  就可以使用；

1、在类中定义一个静态私有属性成员： static  int  id;
2、在类定义以外，main函数调用之前初始化该变量：
	int student::id = 1;
3、在类的构造和析构函数中进行id编号的自动维护
	构造： id++
	析构： id--
4、在main中多次创建不同的类对象实例化并依次输出
   其类的成员id值，发现自动在增长

5、当类成员依次消亡的时候，发现id值在依次递减；

6、可以在类对象中添加 静态方法用于处理静态变量
	static int  set_id(int x) ==>可以修改全局静态变量
	static int  get_id() ==>可以获取全局静态变量


练习：
	根据以上知识点，编写一个动物类，并在该类中定义
	一个count静态成员，用于统计实例化的动物个数。
	同时要保留该静态成员的获取接口函数；

思考题：
1、静态成员函数能不能直接调用类的其他方法？
    ===》不行 
	
2、类的非静态成员函数能不能调用静态成员函数？
	===》可以

3、静态成员函数中申请的变量是静态变量还是那个区域的变量？
    ===》变量的存储类型决定：栈区  静态存储区   


面向对象 之 继承特性(派生)：

派生类： 站在基类的角度看子类，子类即为派生类
继承类:  站在子类的角度看基类，子类即为继承类

子类在基类的基础上增加自己的属性和方法并沿用一部分
或者全部基类的属性和方法；

继承的一般格式：
  class 子类 : 继承方式  基类
  {
	///属性和方法；
  }；

eg： class student :public  person
	 {
		private:
		  int  xue_id;
		public:
		  void study();
	 };

练习：
	根据以上知识点，设计一个animal的动物基类，
	要具备常见的动物属性和方法，再在animal基类
	的基础上继承并设计一个pet类，


作业：
	设计一个动物类和一个宠物类，并在该类中上下
	继承，分别设置一个静态变量，允许用户输入名称
	并生成宠物，最终输入0 结束操作并输出宠物和
	动物的个数；





