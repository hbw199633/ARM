文件IO： 

1、文件io是一组非缓存操作文件方式，在读写的时候直接操作文件。
2、文件io操作的文件对象不再是文件流指针，而是基于内核的文件描述符；
	文件描述符： 最小 未用 非负 整数
3、所有文件io都有独立的文件io相关头文件

文件操作框架：
	打开  ===》读写(定位)     ===》关闭
	open       read/write/lseek    close


1、打开文件：open
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>

int open(const char *pathname, int flags);
功能：该函数可以打开指定路径+名称的文件。
	  要求该文件必须存在。

参数：pathname 要打开的文件路径+名称
	  flags   打开文件的方式，O_RDONLY  只读
							  O_WRONLY  只写
							  O_RDWR    读写
返回值：成功 返回文件描述符
		失败 -1；
注意：进程一旦启动，系统会默认占用 0 1 2 三个描述符
	 分别表示：
		0 ==  STDIN_FILENO   ===>键盘终端
		1 ==  STDOUT_FILENO  ===>显示器终端
		2 ==  STDERR_FILENO  ===>显示器终端

描述符： 0 - 1023  ==》1024 个
ulimit -a   ==>普通用户的系统极限值设置
ulimit -n xxx 修改极限值设置


#include <unistd.h>  ===>POSIX 标准

int close(int fd);
功能：关闭一个指定的文件描述符，可以关闭多次。
参数：fd 要关闭的目标文件描述符
返回值：成功 0
		失败 -1



文件io操作：
i====》read()
#include <unistd.h>

ssize_t read(int fd, void *buf, size_t count);
功能：该函数可以从已经打开的文件描符对应的文件中获取
	  长度为count字节的数据到本地内存buf中。
参数：fd 已经打开的文件描述符
	  buf 用于存储数据的本地内存。
	  count 获取数据 的长度，一般是buf的大小。
返回值：成功 整形的实际获取的数据长度
		失败 -1;
		文件结尾  0；

思考题：
1、如何编程验证read函数的出错效果？
2、如何编程验证read可以从键盘读取数据？
3、如何编程使用read将任意文件的内容读取后输出到屏幕？



o ====>write()
ssize_t write(int fd, const void *buf, size_t count);
功能：该函数可以将指定内存中的数据写入到目标文件描述符对应的文件中
参数：fd 要写入信息的目标文件描述符
	  buff 要写入文件的内容内存地址
	  count 要写入文件的内容长度字节数，一般是buff的大小。
返回值：成功 写入文件的数据长度
		失败 -1；

1、如何通过write函数向文件中写入非字符串数据，比如整数，浮点数字。。

2、如何通过write函数验证文件io的写操作没有缓存区.

3、如何验证write是否可以直接写屏幕输出。


框架：
	open ===》read/write ==> close 

练习题：
	使用文件io基本框架完成任意两个文件是否相等的比较功能
	类似与 diff 命令效果。
	要求：尽量使用文件io相关函数。

fopen("./abc",r/r+/w/w+/a/a+);
open("./abc",O_RDONLY/O_WRONLY/O_RDWR);

文件打开的另一种方式：
 int open(const char *pathname, int flags, mode_t mode)
 功能：该函数可以打开指定文件并赋予特定权限。
 参数：pathname 要打开的文件路径+名称 == 原始open的第一个参数
       flags  如果该flags 是O_RDONLY
							O_WRONLY
							O_RDWR 三个宏任意一个时候，参数mode可以不写。
	   则该函数退化成原始open两个参数的形式。
			  如果该flags 是O_CREAT与其他形式的组合则，参数mode有效
	   且mode必须是文件的八进制权限。
		
	   ==》flags有两种类型：
			O_RDONLY/O_WRONLY/O_RDWR  三选一
			O_CREAT|O_RDONLY/O_WRONLY/O_RDWR 组成
		   flags 还可以与以下参数宏组合
			O_TRUNC	清空文件
			O_APPEND 追加文件

	  mode 参数是O_CREAT 表示创建文件的权限。

返回值：成功 返回文件描述符
		失败 -1：

练习：
	使用文件io的不同打开方式模拟封装标准io的文件打开方式
	并完成基本的读写验证。
	比如：
		fopen("xxx","a+"); 
		等价与 open("xxx",O_CREAT|O_APPEND|O_RDWR,0644);

1、权限能不能任意给，比如0777 /0000 /0111 ？不写权限行不行？
	如果有O_CREAT 就必须有权限，不能省略。
	权限是根据目录的文件权限掩码umask决定。==>普通文件 0644
										   ==>可执行文件 0755
	如果要给任意权限，就将目录文件权限掩码删除。umask 0


2、如果文件已经存在，怎么判断？
   ====>flags ==>O_EXCL 检测文件是否存在

3、创建函数
int creat(const char *pathname, mode_t mode);
等价于：
	open("xxx",O_CREAT|O_WRONLY|O_TRUNC,0644);


4、fdopen
FILE *fdopen(int fd, const char *mode);
功能：该函数可以将一个已经以文件io打开的文件转换成标准io形式。
参数： fd  已经打开的文件描述符
	   mode 标准io的打开方式“"r/r+  w/w+ a/a+"
返回值：成功 返回文件流对象
		失败 返回NULL；

注意：
1、原文件的打开方式必须与fdopen的打开方式兼容，确保文件io打开方式>标准io。
2、文件打开后的文件流指针是同一个文件指针，新增加的数据位于文件指针位置。

3、文件的关闭只能有一种方式，不能同时用文件io和标准io都关闭。




文件定位操作：lseek
 off_t lseek(int fd, off_t offset, int whence);
 功能：该函数可以在fd关联的文件中进行定位操作。
 参数：fd 要定位文件的文件描述符
	   offset 要偏移的偏移量  >0 向文件末尾偏移
			          <0 向文件开头偏移
				  = 0 不偏移
	   whence 偏移的起始位置 SEEK_SET  开头 
				SEEK_CUR  当前
				SEEK_END  末尾
  返回值：成功 返回移动指针之后距离文件开头的字节数
		  失败  -1；


  思考题：lseek是否和fseek具有同样的问题。
     1、空洞文件
	 2、偏移超过开头位置的读写
	 3、设备文件
	 4、a/a+ 打开方式


作业：
1、使用文件io实现如下功能，提示用户任意输入
   将用户输入的信息写入文件并统计输入的字符个数
   当用户输入'#'的时候程序退出并打印字符个数。

2、使用文件io函数自己封装一个类似与printf函数的myprintf函数
	要求必须有缓存特性。
	比如：myprintf("xxxxx");  ==>屏幕不显示内容
		  myprintf("xxxxx\n");===>屏幕显示输出内容"xxxxx";




