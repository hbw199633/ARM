网络编程：

1、网络基础之互联网历史；

中国四大骨干网：
1、中国科学技术网络 ===》科技网
2、中国教育科研网络 ===》教育网
3、中国公用信息网络 ===》公网
4、中国金桥信息网络 ===》金融网


2、网络模型：
	2.1 OSI 模型 ===》开放系统互联模型  ==》7 层  ==》理想模型

		应用层
		表示层
		会话层

		传输层
		网络层
	
		物理链路层
		物理层

	2.2 TCP/IP模型  ===》网际互联模型   ==》4 层  ==》事实模型
		
		应用层 
		传输层  ===》TCP/UDP 
		网络层  ===》IP...
		物理层


3、TCP/IP 协议族；

		应用层：   HTTP  TFTP FTP  SNMP  DNS.... ===>业务逻辑
		传输层：   TCP   UDP					 ===>进程端口号
		网络层:    IP   ICMP RIP  OSPF ...		 ===>主机ip地址
		物理层：   ARP  RARP ...				 ===>主机mac地址

	    www.rfc.org  ===>RFC 793   RFC 768 
					 ===>tcp 协议 793 ===>传输控制协议
					 		特点： 有链接 可靠性高 实时性
					 ===>udp 协议 768 ===>用户数据报协议
					 		特点： 无链接  不可靠   大数据

	    中国协议分析网
===================================================================
3、网络接口函数：

  3.1  socket ===>套接字 ===》BSD SOCKET ===》一组底层网络编程接口；

  3.2  mac： 每个主机有一块网卡地址；
       ip：  每个网络主机的身份编号；32bit位 4字节 ipv4 地址；
	   port：每个主机中进程的对应号码；tcp/udp  65536 范围

  3.3 网络字节序： 大端存储

#include <arpa/inet.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>


///数字的转换格式
  uint32_t htonl(uint32_t hostlong);
  uint16_t htons(uint16_t hostshort);
  uint32_t ntohl(uint32_t netlong);
  uint16_t ntohs(uint16_t netshort);

///字符串的转换格式
 in_addr_t inet_addr(const char *cp);
 char *inet_ntoa(struct in_addr in);


	3.4 编程模型： c/s 模式   b/s 模式

	  c： client
	  s:  server  ===> 客户端/服务器模型

	  b:  browser
	  s:  server  ===> 浏览器/服务器模型

   3.5 编程协议： TCP/UDP 协议


 4、基于TCP协议的网络程序；

 	server:
	socket()==>bind()==>listen()==>accept()==>recv()/send()==>close();


	client:
	socket()==>bind()可选 ==>connect()==>send()/recv()==>close()



服务器端：
#include <sys/types.h>          /* See NOTES */
#include <sys/socket.h>

int socket(int domain, int type, int protocol);
功能：创建一个用于网络通信的套接字文件。
参数：domain  地址族；AF_INET 表示ipv4 的网络程序
					  AF_UNIX/AF_LOCAL 表示单机进程程序
	  type    套接字类型；SOCK_STREAM  流式套接字，tcp程序
	  					  SOCK_DGRAM   用户数据报套接字，udp程序

	  protocol 应用层协议类型，0 表示自动匹配；
返回值：成功 返回套接字文件的描述符 
		失败 -1；


int bind(int sockfd, const struct sockaddr *addr,socklen_t addrlen);
功能:该函数可以将已经生成的套接字文件与本地网卡绑定；
参数：sockfd  套接字文件描述符，一般是socket的返回值；
	  addr    本地网卡地址信息结构体，通用结构如下：
	  	struct sockaddr 
		{
		  sa_family_t sa_family;
		  char        sa_data[14];
	    };

		由于以上结构不能直观配置网卡信息，所有有如下变种；
		struct sockaddr_in
		{
			u_short 		sin_family;  //地址族，AF_INET
			u_short     	sin_port;    //端口号，注意字节序
			struct in_addr 	sin_addr;    //ip地址，32位的数字
			unsigned char   sin_zero[8]; //填充字段，一般不用
		}
		其中： struct _in_addr 
			   {
			   		unsigned int  s_addr;
			   }

	   addrlen 参数2 的长度；
返回值：成功 0	
		失败  -1；


3、int listen(int sockfd, int backlog);
   功能：该函数用于在指定的套接字上监听客户端链接；
   参数：sockfd 套接字id
   		 backlog 允许接入的客户端个数，一般要>0 的值；
   返回值： 成功 0
   			失败 -1；


4、接入链接   
int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);
功能：该函数用于服务器从本地的端口上接入一个有效链接客户端；
	  如果没有链接，则函数阻塞等待；

参数： sockfd 套接字id；
	   addr   链接客户端的地址信息，如果不关心用null表示；
	   		  如果要获取客户端信息，必须事先定义同类型变量；

	   addrlen  参数2 的地址长度的地址，如果不关心用NULL表示；
	   			如果参数2 不是NULL，则该值必须有值；
返回值： 成功  通信套接字id ！！！！！！ === connfd
		失败  -1；


5、数据操作：发送和接收

	send()/recv();       ====>tcp
	sendto()/recvfrom(); ====>udp
	sendmsg()/recvmsg();
	write()/read();

	发送数据：
	ssize_t send(int sockfd, const void *buf, size_t len, int flags);
    功能：该函数可以将用户数据通过通信套接字发送给对端；
	参数: sockfd 通信套接字id
		  buf    要发送的用户数据地址；
		  len    要发送的数据长度
		  flags  数据发送方式，0 表示阻塞发送；
	返回值：成功 发送的数据长度
			失败 -1；

   接受数据：
   ssize_t recv(int sockfd, void *buf, size_t len, int flags);
   功能： 该函数可以从指定的通信套接字上取出网络数据；
   		  如果没有数据到达则阻塞等待；
   参数： sockfd  通信套接字
   		  buf     存储数据的地址
		  len     存储数据的长度
		  flags   获取数据方式，0 表示阻塞等待；
   返回值：成功 获取的数据长度
   		   失败 -1；

5、close 关系套接字，注意：服务器退出时候要关闭两个套接字
		 通信套接字 ==》close(connfd);
		 文件套接字 ==> close(sockfd);


============================================================
客户端：

1、socket()  类似与服务器端；

2、bind（）可选，不选；

3、connect() 链接，属于客户端专有函数

int connect(int sockfd, const struct sockaddr *addr,socklen_t addrlen);
功能：该函数用于客户端程序向目标服务器发起链接请求；
参数：sockfd 套接字id 等于socket的返回值,
			 等于通信套接字；
	  addr  要链接的目标服务器地址信息结构体，需要提前定义并
	  		初始化，同时该值不能为空；
	  addrlen  要链接的目标地址结构体长度；
返回值：成功 0，sockfd 套接字就变为通信套接字；
		失败 -1；


4、发送数据：

	ssize_t send(int sockfd, const void *buf, size_t len, int flags);
    功能：该函数可以将用户数据通过通信套接字发送给对端；
	参数: sockfd 通信套接字id == sockfd == socket() 的返回值；
		  buf    要发送的用户数据地址；
		  len    要发送的数据长度
		  flags  数据发送方式，0 表示阻塞发送；
	返回值：成功 发送的数据长度
			失败 -1；

  接收数据类似发送数据操作；

5、关闭套接字  只关闭sockfd 一个就行；


练习：
1、同桌之间分工编写服务器和客户端程序，完成可以从客户端
	向服务器端发送用户输入的信息；

	客户端：获取用户输入并发送给服务器
	服务器：从套接字获取数据并打印输出
	当双方遇到"quit" 的时候同时退出；

地址重用问题：
  bind函数的问题，在一个服务器bind成功后客户端非正常退出会自动
  保留一段时间的链接。所以立即链接会有 地址在使用使用的异常，

  int  on = 1;
  setsockopt(sockfd,SOL_SOCKET,SO_REUSEADDR,&on,sizeof(on));
  ///允许地址重用的开关打开。

  代码添加在bind之前，即可。

代码扩充性差：
1、客户端必须可以在启动的时候指定服务器地址和端口；
2、服务器必须在启动的时候指定监听的端口和地址；
3、不论是服务器还是客户端，都应该有一个正常退出的接口；





作业：
  设计一个网络程序可以和同桌进行无障碍点对点聊天功能；

